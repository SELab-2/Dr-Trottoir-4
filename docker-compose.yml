services:

  reverseproxy:
    image: reverseproxy
    ports:
      - 2002:2002
      - 80:80
      - 443:443
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    restart: always

  redis:
    image: redis:7.2-rc1-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  database:
    image: postgres:15-alpine
    ports:
      - "5432:5432"

    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=django
      - POSTGRES_DB=drtrottoir

    volumes:
      - ./data/drtrottoir:/var/lib/postgresql/data/

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U django -d drtrottoir" ]
      interval: 5s
      timeout: 5s
      retries: 5


  backend-wsgi:
    build:
      context: ./backend
      dockerfile: Dockerfile

    command: [ "gunicorn", "config.wsgi:application", "-b", "localhost:8000" ]

    ports:
      - 8000:8000

    environment:
      - DEBUG=False
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=django
      - POSTGRES_DB=drtrottoir

    volumes:
      - ./backend:/app/backend-wsgi

    # TODO: update health check to check the right port
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/api/" ]
      interval: 1m
      timeout: 10s
      retries: 3

    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  backend-asgi:
    build:
      context: ./backend
      dockerfile: Dockerfile

    command: [ "daphne", "config.asgi:application", "-b", "localhost", "-p", "9000" ]

    ports:
      - 9000:9000

    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DEBUG=False
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=django
      - POSTGRES_DB=drtrottoir

    volumes:
      - ./backend:/app/backend-asgi

    depends_on:
      backend-wsgi:
        condition: service_started
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile

    volumes:
      - ./frontend/pages:/app/frontend/pages
      - ./frontend/components:/app/frontend/components
      - ./frontend/lib:/app/frontend/lib
      - ./frontend/public:/app/frontend/public
      - ./frontend/styles:/app/frontend/styles
      - ./frontend/locales:/app/frontend/locales

    depends_on:
      backend-wsgi:
        condition: service_started
      backend-asgi:
        condition: service_started
      reverseproxy:
        condition: service_started